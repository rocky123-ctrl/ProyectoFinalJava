/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

package TorreHanoi;

import Principal.Menuprincipal;
import Principal.Usuario;

import javax.swing.JComboBox;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

import Datos.General;
import Datos.Partidas;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.Timer;

public class VentanaPrincipal extends javax.swing.JFrame {

    Partidas modelo = General.modelotransferencia;
    int lapsoTiempo = 0;
    int segundos = 0;
    int minutos = 0;
    int horas = 0;
    int datos[]=new int[7];
    boolean start = false;
    int ContNumMov = 0;
    Pila PilaTorreA;
    Pila PilaTorreB;
    Pila PilaTorreC;
    
    DefaultTableModel ModeloTablaTorreA,ModeloTablaTorreB,ModeloTablaTorreC;
    
    int Objetivo = 0;
    int Paso = 0;
    double NumMinMov = 0;
    boolean Stop = false;
    
    String sec = String.format("%02d",segundos);
    String min = String.format("%02d",minutos);
    String hor = String.format("%02d",horas);
    String nombreJug="";
    
    Timer timer = new Timer(1000, new ActionListener(){
        @Override
        public void actionPerformed(ActionEvent e){
            lapsoTiempo = lapsoTiempo + 1000;
            horas = (lapsoTiempo/3600000);
            minutos = (lapsoTiempo/60000)%60;
            segundos = (lapsoTiempo/1000)%60;
            
            String sec = String.format("%02d", segundos);
            String min = String.format("%02d", minutos);
            String hor = String.format("%02d", horas);
            
            cronometro.setText(hor+" : "+min+" : "+sec);
        }
        
    });
    
    
    private void reset(){
        timer.stop();
        lapsoTiempo = 0;
        segundos = 0;
        minutos = 0;
        horas = 0;
        
        String seg = String.format("%02d", segundos);
        String min = String.format("%02d", minutos);
        String hor = String.format("%02d", horas);
        
        cronometro.setText(hor+" : "+min+" : "+seg);
        
    }
    
    
    public VentanaPrincipal() {
        initComponents();
        ModeloTablaTorreA = (DefaultTableModel) TorreA.getModel();
        ModeloTablaTorreA.setRowCount(10);
        
        ModeloTablaTorreB = (DefaultTableModel) TorreB.getModel();
        ModeloTablaTorreB.setRowCount(10);
        
        ModeloTablaTorreC = (DefaultTableModel) TorreC.getModel();
        ModeloTablaTorreC.setRowCount(10);
        
        DefaultTableCellRenderer renderA = new DefaultTableCellRenderer();
        renderA.setHorizontalAlignment(SwingConstants.CENTER);
        TorreA.getColumnModel().getColumn(0).setCellRenderer(renderA);
        
        DefaultTableCellRenderer renderB = new DefaultTableCellRenderer();
        renderB.setHorizontalAlignment(SwingConstants.CENTER);
        TorreB.getColumnModel().getColumn(0).setCellRenderer(renderB);
        
        DefaultTableCellRenderer renderC = new DefaultTableCellRenderer();
        renderC.setHorizontalAlignment(SwingConstants.CENTER);
        TorreC.getColumnModel().getColumn(0).setCellRenderer(renderC);
        this.setLocationRelativeTo(null);
        String nombres2[] = modelo.getNombre();
        if(nombres2 != null){
            for(String nombre : nombres2){
                jComboBox1.addItem(nombre);
                
            }
        }
    }

    private void limpiar(){
        ContNumMov =0;
        NumMinMov =0;
        CbNumDiscos.setSelectedItem(String.valueOf(Objetivo));
    }
    
    private void MirarCantidadMovimientos(){
        ContNumMov++;
        LblNumMov.setText(String.valueOf(ContNumMov));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    private void Reiniciar(){
        
        try{
            
            if(!LblMinMov.getText().equals("")){
                limpiar();
                Iniciar();
            }
            
        }catch(Exception e){
            System.out.println("Error: "+e.getMessage());
        }
        
    }
    
    private void Iniciar(){
        
        try{
        PilaTorreA = new Pila();
        PilaTorreB = new Pila();
        PilaTorreC = new Pila();
        
        Objetivo = Integer.parseInt(CbNumDiscos.getSelectedItem().toString());
        
        NumMinMov = Math.pow(2, Objetivo)-1;
        NumPaso.removeAllItems();
        for(int i=1; i<=NumMinMov;i++){
            NumPaso.addItem(String.valueOf(i));
        }
        LblNumMov.setText(String.valueOf(ContNumMov));
        LblMinMov.setText(String.valueOf(String.format("%.0f", NumMinMov)));
        
        for(int x = Objetivo; x >= 1; x--){
            Nodo Plataforma = new Nodo();
            String Disco = "";
            for(int y = x; y > 0; y--){
                Disco+= "O";
            }
            
            Plataforma.setDato(Disco);
            PilaTorreA.Push(Plataforma);
                
        }
        
        PresentarTorreA();
        PresentarTorreB();
        PresentarTorreC();
        }catch(Exception e){
            System.out.println("Error: "+e.getMessage());
        }
        
        
    }
    
    private void PresentarTorreA(){
        ((DefaultTableModel)TorreA.getModel()).setRowCount(0);
        ModeloTablaTorreA.setRowCount(10);
        Nodo K;
        
        int RowDisco = (10-PilaTorreA.getContNodo());
        
        
        if(PilaTorreA.getContNodo() > 0){
            for(K = PilaTorreA.getCabeza(); K.getAbajo()!=null;K = K.getAbajo()){
                String[] VectorNormal = {K.getDato()};
                ModeloTablaTorreA.insertRow(RowDisco, VectorNormal);
                RowDisco++;
            }
            if(K.getAbajo()==null){
                String[] VectorNormal = {K.getDato()};
                ModeloTablaTorreA.insertRow(RowDisco, VectorNormal);
            }
        }
        
        TorreA.setModel(ModeloTablaTorreA);
        ModeloTablaTorreA.setRowCount(10);
        
    }
    private void PresentarTorreB(){
        ((DefaultTableModel)TorreB.getModel()).setRowCount(0);
        ModeloTablaTorreB.setRowCount(10);
        Nodo K;
        
        int RowDisco = (10-PilaTorreB.getContNodo());
        
        
        if(PilaTorreB.getContNodo() > 0){
            for(K = PilaTorreB.getCabeza(); K.getAbajo()!=null;K = K.getAbajo()){
                String[] VectorNormal = {K.getDato()};
                ModeloTablaTorreB.insertRow(RowDisco, VectorNormal);
                RowDisco++;
            }
            if(K.getAbajo()==null){
                String[] VectorNormal = {K.getDato()};
                ModeloTablaTorreB.insertRow(RowDisco, VectorNormal);
            }
        }
        
        TorreB.setModel(ModeloTablaTorreB);
        ModeloTablaTorreB.setRowCount(10);
        
    }
    private void PresentarTorreC(){
        ((DefaultTableModel)TorreC.getModel()).setRowCount(0);
        ModeloTablaTorreC.setRowCount(10);
        Nodo K;
        
        int RowDisco = (10-PilaTorreC.getContNodo());
        
        
        if(PilaTorreC.getContNodo() > 0){
            for(K = PilaTorreC.getCabeza(); K.getAbajo()!=null;K = K.getAbajo()){
                String[] VectorNormal = {K.getDato()};
                ModeloTablaTorreC.insertRow(RowDisco, VectorNormal);
                RowDisco++;
            }
            if(K.getAbajo()==null){
                String[] VectorNormal = {K.getDato()};
                ModeloTablaTorreC.insertRow(RowDisco, VectorNormal);
            }
        }
        
        TorreC.setModel(ModeloTablaTorreC);
        ModeloTablaTorreC.setRowCount(10);
        
    }
    
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        TorreB = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        TorreC = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        TorreA = new javax.swing.JTable();
        BtnA_B = new javax.swing.JButton();
        BtnA_C = new javax.swing.JButton();
        BtnB_A = new javax.swing.JButton();
        BtnB_C = new javax.swing.JButton();
        BtnC_A = new javax.swing.JButton();
        BtnC_B = new javax.swing.JButton();
        CbNumDiscos = new javax.swing.JComboBox<>();
        LblMinMov = new javax.swing.JLabel();
        LblNumMov = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        BtnIniciar = new javax.swing.JButton();
        BtnReiniciar = new javax.swing.JButton();
        BtnResolver = new javax.swing.JButton();
        cronometro = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnAbandonar = new javax.swing.JButton();
        LblTruco = new javax.swing.JLabel();
        Btn_Truco = new javax.swing.JButton();
        NumPaso = new javax.swing.JComboBox<>();
        Btn_Ir = new javax.swing.JButton();
        Btn_Resolverinmediato = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFocusTraversalPolicyProvider(true);
        setForeground(new java.awt.Color(0, 51, 102));

        TorreB.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Torre B"
            }
        ));
        TorreB.setAutoscrolls(false);
        TorreB.setFocusable(false);
        TorreB.setRowSelectionAllowed(false);
        jScrollPane1.setViewportView(TorreB);

        TorreC.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Torre C"
            }
        ));
        TorreC.setAutoscrolls(false);
        TorreC.setFocusable(false);
        TorreC.setRowSelectionAllowed(false);
        jScrollPane2.setViewportView(TorreC);

        TorreA.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Torre A"
            }
        ));
        TorreA.setAutoscrolls(false);
        TorreA.setFocusable(false);
        TorreA.setRowSelectionAllowed(false);
        jScrollPane3.setViewportView(TorreA);

        BtnA_B.setText("B");
        BtnA_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnA_BActionPerformed(evt);
            }
        });

        BtnA_C.setText("C");
        BtnA_C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnA_CActionPerformed(evt);
            }
        });

        BtnB_A.setText("A");
        BtnB_A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnB_AActionPerformed(evt);
            }
        });

        BtnB_C.setText("C");
        BtnB_C.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnB_CActionPerformed(evt);
            }
        });

        BtnC_A.setText("A");
        BtnC_A.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnC_AActionPerformed(evt);
            }
        });

        BtnC_B.setText("B");
        BtnC_B.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnC_BActionPerformed(evt);
            }
        });

        CbNumDiscos.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "3", "4", "5", "6", "7", "8", "9", "10" }));

        LblMinMov.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        LblMinMov.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LblMinMov.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        LblMinMov.setFocusable(false);

        LblNumMov.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        LblNumMov.setForeground(new java.awt.Color(0, 0, 255));
        LblNumMov.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        LblNumMov.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel3.setText("Numero de Discos");
        jLabel3.setToolTipText("");

        jLabel4.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel4.setText("Cantidad Max. Movimientos");
        jLabel4.setToolTipText("");

        jLabel5.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel5.setText("Cantidad de movimientos");
        jLabel5.setToolTipText("");

        BtnIniciar.setText("Iniciar");
        BtnIniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnIniciarActionPerformed(evt);
            }
        });

        BtnReiniciar.setText("Reiniciar");
        BtnReiniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnReiniciarActionPerformed(evt);
            }
        });

        BtnResolver.setText("Resolver Paso");
        BtnResolver.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnResolverActionPerformed(evt);
            }
        });

        cronometro.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        cronometro.setText("00 : 00 : 00");

        jLabel1.setFont(new java.awt.Font("Arial", 1, 12)); // NOI18N
        jLabel1.setText("Tiempo");

        btnAbandonar.setText("Abandonar");
        btnAbandonar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbandonarActionPerformed(evt);
            }
        });

        LblTruco.setBorder(new javax.swing.border.MatteBorder(null));

        Btn_Truco.setText("Truco");
        Btn_Truco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_TrucoActionPerformed(evt);
            }
        });

        Btn_Ir.setText("Ir");
        Btn_Ir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_IrActionPerformed(evt);
            }
        });

        Btn_Resolverinmediato.setText("Resolver ");
        Btn_Resolverinmediato.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Btn_ResolverinmediatoActionPerformed(evt);
            }
        });

        jLabel2.setText("JUGADOR:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(BtnA_B, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(BtnA_C, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(BtnB_A, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BtnB_C, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(BtnC_A, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(BtnC_B, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(40, 40, 40))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 32, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cronometro)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CbNumDiscos, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LblMinMov, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LblNumMov, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(LblTruco, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(70, 70, 70))))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(BtnReiniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(41, 41, 41)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(NumPaso, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(28, 28, 28)
                                        .addComponent(Btn_Ir, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(Btn_Resolverinmediato)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(BtnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnAbandonar, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(54, 54, 54))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 190, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(46, 46, 46))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(Btn_Truco, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41)
                        .addComponent(BtnResolver)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(BtnA_B, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(BtnA_C, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(BtnB_A, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(BtnB_C, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(BtnC_A, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(BtnC_B, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(CbNumDiscos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(LblMinMov, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(LblNumMov, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(cronometro, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LblTruco, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NumPaso, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Ir, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(57, 57, 57)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Btn_Truco, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnResolver, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnIniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BtnReiniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Btn_Resolverinmediato, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAbandonar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(49, 49, 49))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void MoverdeA_B(){
        try{
            
            if(PilaTorreA.getContNodo() > 0){
                Nodo Plataforma = new Nodo();
                Plataforma.setDato(PilaTorreA.Peek());
                if(PilaTorreB.getContNodo()>0){
                    if(Plataforma.getDato().compareTo(PilaTorreB.Peek())>0){
                        return;
                    }
                }
                
                PilaTorreA.Pop();
                PilaTorreB.Push(Plataforma);
                
                PresentarTorreA();
                PresentarTorreB();
                MirarCantidadMovimientos();
                
            }
            
        }catch(Exception e){
            System.out.println("Error: "+e.getMessage());
        }
    }
    
    private void BtnA_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnA_BActionPerformed
        MoverdeA_B();
    }//GEN-LAST:event_BtnA_BActionPerformed

    private void MoverdeA_C(){
        try{
            
            if(PilaTorreA.getContNodo() > 0){
                Nodo Plataforma = new Nodo();
                Plataforma.setDato(PilaTorreA.Peek());
                if(PilaTorreC.getContNodo()>0){
                    if(Plataforma.getDato().compareTo(PilaTorreC.Peek())>0){
                        return;
                    }
                }
                
                PilaTorreA.Pop();
                PilaTorreC.Push(Plataforma);
                
                PresentarTorreA();
                PresentarTorreC();
                MirarCantidadMovimientos();
                
                if(PilaTorreC.getContNodo() == Objetivo && ContNumMov == NumMinMov){
                    JOptionPane.showMessageDialog(null, "Felicidades has alcanzado el objetivo en el numero minimo de movimientos\n\nIntenta con otro nivel de dificultad","Felicitaciones",JOptionPane.INFORMATION_MESSAGE);
                    timer.stop();
                    btnAbandonar.setText("Salir");
                    String tiempo;
                    int tiempo1;
                    tiempo1 = horas*3600+minutos*60+segundos;
                    tiempo = String.valueOf(tiempo1);
                    modelo.modificarabandono(nombreJug, 1, ContNumMov, tiempo);
                    

                }
                else if(PilaTorreC.getContNodo() == Objetivo && ContNumMov != NumMinMov){
                    JOptionPane.showMessageDialog(null, "Felicidades Lo has resuelto \n\nPero no has cumplido con el minimo de movimientos","Buen trabajo",JOptionPane.INFORMATION_MESSAGE);
                    timer.stop();
                    btnAbandonar.setText("Salir");
                    String tiempo;
                    int tiempo1;
                    tiempo1 = horas*3600+minutos*60+segundos;
                    tiempo = String.valueOf(tiempo1);
                    modelo.modificarabandono(nombreJug, 2, ContNumMov, tiempo);
                }
                
            }
            
        }catch(Exception e){
            System.out.println("Error: "+e.getMessage());
        }
    }
    
    
    private void BtnA_CActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnA_CActionPerformed
        MoverdeA_C();
    }//GEN-LAST:event_BtnA_CActionPerformed

    private void MoverdeB_A(){
        try{
            
            if(PilaTorreB.getContNodo() > 0){
                Nodo Plataforma = new Nodo();
                Plataforma.setDato(PilaTorreB.Peek());
                if(PilaTorreA.getContNodo()>0){
                    if(Plataforma.getDato().compareTo(PilaTorreA.Peek())>0){
                        return;
                    }
                }
                
                PilaTorreB.Pop();
                PilaTorreA.Push(Plataforma);
                
                PresentarTorreB();
                PresentarTorreA();
                MirarCantidadMovimientos();
                
            }
            
        }catch(Exception e){
            System.out.println("Error: "+e.getMessage());
        }
    }
    
    
    private void BtnB_AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnB_AActionPerformed
        MoverdeB_A();
    }//GEN-LAST:event_BtnB_AActionPerformed

    private void MoverdeB_C(){
        try{
            
            if(PilaTorreB.getContNodo() > 0){
                Nodo Plataforma = new Nodo();
                Plataforma.setDato(PilaTorreB.Peek());
                if(PilaTorreC.getContNodo()>0){
                    if(Plataforma.getDato().compareTo(PilaTorreC.Peek())>0){
                        return;
                    }
                }
                
                PilaTorreB.Pop();
                PilaTorreC.Push(Plataforma);
                
                PresentarTorreB();
                PresentarTorreC();
                MirarCantidadMovimientos();
                
                if(PilaTorreC.getContNodo() == Objetivo && ContNumMov == NumMinMov){
                    JOptionPane.showMessageDialog(null, "Felicidades has alcanzado el objetivo en el numero minimo de movimientos\n\nIntenta con otro nivel de dificultad","Felicitaciones",JOptionPane.INFORMATION_MESSAGE);
                    timer.stop();
                    btnAbandonar.setText("Salir");
                    String tiempo;
                    int tiempo1;
                    tiempo1 = horas*3600+minutos*60+segundos;
                    tiempo = String.valueOf(tiempo1);
                    modelo.modificarabandono(nombreJug, 1, ContNumMov, tiempo);
                }else if(PilaTorreC.getContNodo() == Objetivo && ContNumMov != NumMinMov){
                    JOptionPane.showMessageDialog(null, "Felicidades Lo has resuelto \n\nPero no has cumplido con el minimo de movimientos","Buen trabajo",JOptionPane.INFORMATION_MESSAGE);
                    btnAbandonar.setText("Salir");
                    timer.stop();
                    String tiempo;
                    int tiempo1;
                    tiempo1 = horas*3600+minutos*60+segundos;
                    tiempo = String.valueOf(tiempo1);
                    modelo.modificarabandono(nombreJug, 2, ContNumMov, tiempo);
                    
                }
                
            }
            
        }catch(Exception e){
            System.out.println("Error: "+e.getMessage());
        }
    }
    
    
    private void BtnB_CActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnB_CActionPerformed
        MoverdeB_C();
    }//GEN-LAST:event_BtnB_CActionPerformed

        private void MoverdeC_A(){
        try{
            
            if(PilaTorreC.getContNodo() > 0){
                Nodo Plataforma = new Nodo();
                Plataforma.setDato(PilaTorreC.Peek());
                if(PilaTorreA.getContNodo()>0){
                    if(Plataforma.getDato().compareTo(PilaTorreA.Peek())>0){
                        return;
                    }
                }
                
                PilaTorreC.Pop();
                PilaTorreA.Push(Plataforma);
                
                PresentarTorreC();
                PresentarTorreA();
                MirarCantidadMovimientos();
                
            }
            
        }catch(Exception e){
            System.out.println("Error: "+e.getMessage());
        }
    }
        
    private void BtnC_AActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnC_AActionPerformed
        MoverdeC_A();
    }//GEN-LAST:event_BtnC_AActionPerformed

    private void MoverdeC_B(){
        try{
            
            if(PilaTorreC.getContNodo() > 0){
                Nodo Plataforma = new Nodo();
                Plataforma.setDato(PilaTorreC.Peek());
                if(PilaTorreB.getContNodo()>0){
                    if(Plataforma.getDato().compareTo(PilaTorreB.Peek())>0){
                        return;
                    }
                }
                
                PilaTorreC.Pop();
                PilaTorreB.Push(Plataforma);
                
                PresentarTorreC();
                PresentarTorreB();
                MirarCantidadMovimientos();
                
            }
            
        }catch(Exception e){
            System.out.println("Error: "+e.getMessage());
        }
    }
    
    private void BtnC_BActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnC_BActionPerformed
        MoverdeC_B();
    }//GEN-LAST:event_BtnC_BActionPerformed

    private void BtnReiniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnReiniciarActionPerformed
        if(!LblMinMov.getText().equals("")){
        Reiniciar();
        reset();
        btnAbandonar.setText("Salir");
        BtnA_B.setEnabled(false);
        BtnA_C.setEnabled(false);
        BtnB_A.setEnabled(false);
        BtnB_C.setEnabled(false);
        BtnC_A.setEnabled(false);
        BtnC_B.setEnabled(false);
        jComboBox1.setEnabled(true);
        }
    }//GEN-LAST:event_BtnReiniciarActionPerformed

    private void BtnIniciarActionPerformed(java.awt.event.ActionEvent evt) {                                            
        ContNumMov = 0;
        btnAbandonar.setText("Abandonar");
        Iniciar();
        reset();
        timer.start();  
        BtnA_B.setEnabled(true);
        BtnA_C.setEnabled(true);
        BtnB_A.setEnabled(true);
        BtnB_C.setEnabled(true);
        BtnC_A.setEnabled(true);
        BtnC_B.setEnabled(true);
        jComboBox1.setEnabled(false);
        nombreJug = jComboBox1.getSelectedItem().toString();
    }                                          

    
    boolean stop = false;
    
    private void Moverplataforma(Pila Origen, Pila Destino){
        if(stop == false){
            Nodo Plataforma = new Nodo();
            Plataforma.setDato(Origen.Peek());
            Origen.Pop();
            Destino.Push(Plataforma);
            PresentarTorreA();
            PresentarTorreB();
            PresentarTorreC();
            MirarCantidadMovimientos();
            JOptionPane pane = new JOptionPane("Paso # "+LblNumMov.getText()+"\n\n¿Continuar?",JOptionPane.QUESTION_MESSAGE,JOptionPane.YES_NO_OPTION);
            JDialog dialog = pane.createDialog("Numero de pasos");
            dialog.setLocation(600, 400);
            dialog.setVisible(true);
            int opt = (int) pane.getValue();
            if(pane.getValue().equals(JOptionPane.NO_OPTION)){
                stop = true;
                timer.stop();
              
            }
        }
    }
    
    private void resolverhanoi(int n,Pila Origen,Pila Auxiliar,Pila Destino){
    
        if(n==1){
            Moverplataforma(Origen,Destino);
            
            
        }else{
            resolverhanoi(n-1, Origen,Destino,Auxiliar);
            Moverplataforma(Origen,Destino);
            resolverhanoi(n-1, Auxiliar,Origen,Destino);
            
        }
    }
    
    
    
    private void BtnResolverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnResolverActionPerformed
        if(!LblMinMov.getText().equals("") && PilaTorreC.getContNodo()!= Objetivo){
            reset();
            timer.start();
            Reiniciar();
            stop = false;
            resolverhanoi(Objetivo,PilaTorreA,PilaTorreB,PilaTorreC);
            timer.stop();
            
        }
    }//GEN-LAST:event_BtnResolverActionPerformed

    private void btnAbandonarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbandonarActionPerformed
        Menuprincipal menupr = new Menuprincipal();
        menupr.setVisible(true);
        this.dispose();
        if(btnAbandonar.getText()=="Abandonar")
        {
            modelo.modificarabandono(nombreJug, 3, 0, "0");
        }
        //
        

    }//GEN-LAST:event_btnAbandonarActionPerformed

    int estado;
    private void Btn_TrucoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_TrucoActionPerformed
        estado = 0;
        verA();
        verB();
        verC();
    }//GEN-LAST:event_Btn_TrucoActionPerformed

    
    
    private void Moverplataformainmediata(Pila Origen, Pila Destino){
        if(stop == false){
            Nodo Plataforma = new Nodo();
            Plataforma.setDato(Origen.Peek());
            Origen.Pop();
            Destino.Push(Plataforma);
            PresentarTorreA();
            PresentarTorreB();
            PresentarTorreC();
            MirarCantidadMovimientos();  
            }
    }
    
    private void resolverhanoinmediato(int n,Pila Origen,Pila Auxiliar,Pila Destino){
    
        if(n==1){
            Moverplataformainmediata(Origen,Destino);
            
        }else{
            resolverhanoinmediato(n-1, Origen,Destino,Auxiliar);
            Moverplataformainmediata(Origen,Destino);
            resolverhanoinmediato(n-1, Auxiliar,Origen,Destino);
            
        }
    }
    
    
    private void Btn_ResolverinmediatoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_ResolverinmediatoActionPerformed
        if(!LblMinMov.getText().equals("") && PilaTorreC.getContNodo()!= Objetivo){
            reset();
            timer.start();
            Reiniciar();
            stop = false;
            resolverhanoinmediato(Objetivo,PilaTorreA,PilaTorreB,PilaTorreC);
            timer.stop();
        }
    }//GEN-LAST:event_Btn_ResolverinmediatoActionPerformed

    private void Btn_IrActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Btn_IrActionPerformed
        reset();
        if(!LblMinMov.getText().equals("")){
            Paso = Integer.parseInt(NumPaso.getSelectedItem().toString());
            Reiniciar();
            stop = false;
            resolverhanoihacia(Objetivo,PilaTorreA,PilaTorreB,PilaTorreC);
        }
    }//GEN-LAST:event_Btn_IrActionPerformed

    private void Moverplataformahacia(Pila Origen, Pila Destino){
        if(stop == false){
            Nodo Plataforma = new Nodo();
            Plataforma.setDato(Origen.Peek());
            Origen.Pop();
            Destino.Push(Plataforma);
            PresentarTorreA();
            PresentarTorreB();
            PresentarTorreC();
            MirarCantidadMovimientos();
            if(ContNumMov == Paso ){
                stop = true;
            }
            }
    }
    
    private void resolverhanoihacia(int n,Pila Origen,Pila Auxiliar,Pila Destino){
    
        if(n==1){
            Moverplataformahacia(Origen,Destino);
            
        }else{
            resolverhanoihacia(n-1, Origen,Destino,Auxiliar);
            Moverplataformahacia(Origen,Destino);
            resolverhanoihacia(n-1, Auxiliar,Origen,Destino);
            
        }
    }
    
    private void verA(){
        try{
            if(PilaTorreA.getContNodo() > 0){
                Nodo Plataforma = new Nodo();
                Plataforma.setDato(PilaTorreA.Peek());
                if(estado == 0){
                   if(PilaTorreB.getContNodo()>0){
                    if(Plataforma.getDato().compareTo(PilaTorreB.Peek())<0 && Plataforma.getDato().compareTo(PilaTorreC.Peek())>0){
                        LblTruco.setText("Mover de A_B");
                        estado = 1;
                    }else{estado =0;}
                }else{LblTruco.setText("Mover de A_B");}
                if(PilaTorreC.getContNodo()>0){
                    if(Plataforma.getDato().compareTo(PilaTorreC.Peek())<0 && Plataforma.getDato().compareTo(PilaTorreB.Peek())>0){
                        LblTruco.setText("Mover de A_C");
                        estado = 1;
                    }else{estado = 0;}
                }else{LblTruco.setText("Mover de A_C");}
                if(PilaTorreB.getContNodo()>0 || PilaTorreC.getContNodo()>0){
                    if(Plataforma.getDato().compareTo(PilaTorreB.Peek())<0 && Plataforma.getDato().compareTo(PilaTorreC.Peek())<0){
                        LblTruco.setText("Mover de A_B o Mover de A_C");
                        estado = 1;
                    }else{estado = 0;}
                }else{LblTruco.setText("Mover de A_B o Mover de A_C");}  
                }
            }
            
            
        }catch(Exception e){
            System.out.println("Error: "+e.getMessage());
        }
    }
    
    public void verB(){
        try{
            if(PilaTorreB.getContNodo() > 0){
                Nodo Plataforma = new Nodo();
                Plataforma.setDato(PilaTorreB.Peek());
                if(estado == 0){
                if(PilaTorreA.getContNodo()>0){
                    if(Plataforma.getDato().compareTo(PilaTorreA.Peek())<0 && Plataforma.getDato().compareTo(PilaTorreC.Peek())>0){
                        LblTruco.setText("Mover de B_A");
                        estado = 1;
                    }else{estado =0;}
                }else{LblTruco.setText("Mover de B_A");}
                if(PilaTorreC.getContNodo()>0){
                    if(Plataforma.getDato().compareTo(PilaTorreC.Peek())<0 && Plataforma.getDato().compareTo(PilaTorreA.Peek())>0){
                        LblTruco.setText("Mover de B_C");
                        estado = 1;
                    }else{estado = 0;}
                }else{LblTruco.setText("Mover de B_C");}
                if(PilaTorreA.getContNodo()>0 || PilaTorreC.getContNodo()>0){
                    if(Plataforma.getDato().compareTo(PilaTorreA.Peek())<0 && Plataforma.getDato().compareTo(PilaTorreC.Peek())<0){
                        LblTruco.setText("Mover de B_A o Mover de B_C");
                        estado = 1;
                    }else{estado = 0;}
                }else{LblTruco.setText("Mover de B_A o Mover de B_C");}    
                }
                
            }
            
            
        }catch(Exception e){
            System.out.println("Error: "+e.getMessage());
        }
    }
    
    public void verC(){
        try{
            if(PilaTorreC.getContNodo() > 0){
                Nodo Plataforma = new Nodo();
                Plataforma.setDato(PilaTorreC.Peek());
               if(estado == 0){
                  if(PilaTorreA.getContNodo()>0){
                    if(Plataforma.getDato().compareTo(PilaTorreA.Peek())<0 && Plataforma.getDato().compareTo(PilaTorreB.Peek())>0){
                        LblTruco.setText("Mover de C_A");
                        estado = 1;
                    }else{estado = 0;}
                }else{LblTruco.setText("Mover de C_A");}
                if(PilaTorreB.getContNodo()>0){
                    if(Plataforma.getDato().compareTo(PilaTorreB.Peek())<0 && Plataforma.getDato().compareTo(PilaTorreA.Peek())>0){
                        LblTruco.setText("Mover de C_B");
                        estado = 1;
                    }else{estado = 0;}
                }else{LblTruco.setText("Mover de C_B");}
                if(PilaTorreA.getContNodo()>0 || PilaTorreB.getContNodo()>0){
                    if(Plataforma.getDato().compareTo(PilaTorreA.Peek())<0 && Plataforma.getDato().compareTo(PilaTorreB.Peek())<0){
                        LblTruco.setText("Mover de C_A o Mover de C_B");
                        estado = 1;
                    }else{estado = 0;}
                }else{LblTruco.setText("Mover de C_A o Mover de C_B");}  
               }
                
                
            }
            
        }catch(Exception e){
            System.out.println("Error: "+e.getMessage());
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnA_B;
    private javax.swing.JButton BtnA_C;
    private javax.swing.JButton BtnB_A;
    private javax.swing.JButton BtnB_C;
    private javax.swing.JButton BtnC_A;
    private javax.swing.JButton BtnC_B;
    private javax.swing.JButton BtnIniciar;
    private javax.swing.JButton BtnReiniciar;
    private javax.swing.JButton BtnResolver;
    private javax.swing.JButton Btn_Ir;
    private javax.swing.JButton Btn_Resolverinmediato;
    private javax.swing.JButton Btn_Truco;
    private javax.swing.JComboBox<String> CbNumDiscos;
    private javax.swing.JLabel LblMinMov;
    private javax.swing.JLabel LblNumMov;
    private javax.swing.JLabel LblTruco;
    private javax.swing.JComboBox<String> NumPaso;
    private javax.swing.JTable TorreA;
    private javax.swing.JTable TorreB;
    private javax.swing.JTable TorreC;
    private javax.swing.JButton btnAbandonar;
    private javax.swing.JLabel cronometro;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables
}
